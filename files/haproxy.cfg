global
  log 127.0.0.1 daemon
  chroot /var/lib/haproxy
  user haproxy
  group haproxy
  daemon

  # NOTE: this only sets ulimit, not 'sysctl fs.file-max' which may need tuned
  # TODO calculate this
  maxconn 200000

defaults
  log global
  mode  http
  option  httplog
  option  dontlognull
  retries 3
  option redispatch

  # Time to connect to backends
  timeout connect 20

  # Upper bound on ELB connection draining is 3,600 seconds
  #
  # > When you enable connection draining, you can specify a maximum time for the
  # > load balancer to keep connections alive before reporting the instance as de-
  # > registered. The maximum timeout value can be set between 1 and 3,600 seconds
  # > (the default is 300 seconds). When the maximum time limit is reached, the load
  # > balancer forcibly closes connections to the de-registering instance.
  # http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/config-conn-drain.html
  #
  # Without the knowledge that our client is ELB this value doesn't make sense
  timeout client 3600s
  timeout server 3600s

  # Do not maintain a Keep-Alive connection to the backend so we can cleanup
  # containers after a hotswap. Even with no active frontend connections to
  # HAProxy, HAProxy will maintain a few connections to the backend.
  option http-server-close

frontend {{ .BackendName }}-frontend

  # Bind to all interfaces
  # TODO constrain this to eth0 and lo?
  # I'm not sure what security holes could be exploited by binding to all
  # available interfaces
{{- range $port := .FrontEndPorts }}
  bind *:{{ $port -}}
{{ end }}

  default_backend {{ .BackendName }}-backend
{{ if .IpBlacklistPath }}
  # Reject IPs in the blacklist
  acl ip_blacklist req.hdr_ip(X-Forwarded-For) -f {{ .IpBlacklistPath }}
  http-request deny if ip_blacklist
{{- end }}

  #
  # This capture list is ordered. APPEND ONLY or risk messing up log parsing
  #

  # Log request ids
  capture request header X-Request-Id len 40
  capture response header X-Request-Id len 40

  # Log original request IP
  # Currently only IPv4 is seen from EC2 instances but 45 handles IPv6 with
  # possible IPv4 tunneling. This is one of those things that's good to plan for
  # http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/x-forwarded-headers.html
  capture request header X-Forwarded-For len 45

backend {{ .BackendName }}-backend
{{- range $i, $container := .HAPStdin.Containers }}
  server docker-{{ $i }} 127.0.0.1:{{ $container.HostPort -}}
{{ end }}
  stats enable
  stats uri {{ .StatsUri }}
  stats refresh 5s
  stats auth {{ .StatsUsername }}:{{ .StatsPassword }}
